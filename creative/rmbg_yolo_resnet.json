{
    "key_": "nndeploy.dag.Graph",
    "name_": "rmbg_yolo_resnet.json",
    "desc_": "Graph: Graph for nndeploy in python",
    "device_type_": "kDeviceTypeCodeCpu:0",
    "is_dynamic_input_": false,
    "inputs_": [],
    "is_dynamic_output_": false,
    "outputs_": [],
    "is_graph_": true,
    "parallel_type_": "kParallelTypeTask",
    "is_inner_": false,
    "node_type_": "Intermediate",
    "is_time_profile_": false,
    "is_debug_": false,
    "is_external_stream_": false,
    "is_graph_node_share_stream_": true,
    "queue_max_size_": 16,
    "is_loop_max_flag_": true,
    "loop_count_": -1,
    "node_repository_": [
        {
            "key_": "nndeploy::codec::OpenCvImageDecode",
            "name_": "OpenCvImageDecode_11",
            "desc_": "Decode image using OpenCV, from image path to cv::Mat, default color space is BGR",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                }
            ],
            "node_type_": "Input",
            "path_": "/home/always/github/public/nndeploy/docs/image/demo/detect/sample.jpg",
            "node_repository_": []
        },
        {
            "key_": "nndeploy::preprocess::CvtResizeNormTrans",
            "name_": "CvtResizeNormTrans_12",
            "desc_": "cv::Mat to device::Tensor[cvtcolor->resize->normalize->transpose]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "Tensor",
                    "name_": "CvtResizeNormTrans_12@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "param_": {
                "src_pixel_type_": "kPixelTypeBGR",
                "dst_pixel_type_": "kPixelTypeRGB",
                "interp_type_": "kInterpTypeLinear",
                "h_": 1024,
                "w_": 1024,
                "data_type_": "kDataTypeCodeFp32",
                "data_format_": "kDataFormatNCHW",
                "normalize_": true,
                "scale_": [
                    0.003921568859368563,
                    0.003921568859368563,
                    0.003921568859368563,
                    0.003921568859368563
                ],
                "mean_": [
                    0.5,
                    0.5,
                    0.5,
                    0.5
                ],
                "std_": [
                    1,
                    1,
                    1,
                    1
                ]
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::infer::Infer",
            "name_": "Infer_13",
            "desc_": "Universal Inference Node - Enables cross-platform model deployment with multiple inference backends while maintaining native performance",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": true,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "Tensor",
                    "name_": "CvtResizeNormTrans_12@output_0"
                }
            ],
            "is_dynamic_output_": true,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "Tensor",
                    "name_": "Infer_13@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "type_": "kInferenceTypeOnnxRuntime",
            "param_": {
                "model_type_": "kModelTypeOnnx",
                "is_path_": true,
                "model_value_": [
                    "/home/lds/modelscope/nndeploy/segment/RMBGV1.4.slim.onnx"
                ],
                "external_model_data_": [
                    ""
                ],
                "device_type_": "kDeviceTypeCodeCpu:0",
                "num_thread_": 4,
                "gpu_tune_kernel_": 1,
                "input_num_": 1,
                "input_name_": [
                    ""
                ],
                "input_shape_": [
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                "output_num_": 1,
                "output_name_": [
                    ""
                ],
                "encrypt_type_": "kEncryptTypeNone",
                "license_": "",
                "share_memory_mode_": "kShareMemoryTypeNoShare",
                "precision_type_": "kPrecisionTypeFp32",
                "power_type_": "kPowerTypeNormal",
                "is_dynamic_shape_": false,
                "min_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "opt_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "max_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "parallel_type_": "kParallelTypeNone",
                "worker_num_": 1
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::segment::RMBGPostProcess",
            "name_": "RMBGPostProcess_14",
            "desc_": "Segment RMBG postprocess[device::Tensor->SegmentResult]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                },
                {
                    "desc_": "input_1",
                    "type_": "Tensor",
                    "name_": "Infer_13@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "SegmentResult",
                    "name_": "RMBGPostProcess_14@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "param_": {
                "version": 14
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::segment::DrawMask",
            "name_": "DrawMask_15",
            "desc_": "Draw segmentation mask on input cv::Mat image based on segmentation results[cv::Mat->cv::Mat]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                },
                {
                    "desc_": "input_1",
                    "type_": "SegmentResult",
                    "name_": "RMBGPostProcess_14@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "ndarray",
                    "name_": "DrawMask_15@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "node_repository_": []
        },
        {
            "key_": "nndeploy::codec::OpenCvImageEncode",
            "name_": "OpenCvImageEncode_16",
            "desc_": "Encode image using OpenCV, from cv::Mat to image file, supports common image formats",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "DrawMask_15@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [],
            "node_type_": "Output",
            "path_": "/home/always/github/public/nndeploy/resources/images/sample_rmbg.jpg",
            "node_repository_": []
        },
        {
            "key_": "nndeploy::preprocess::CvtResizeNormTrans",
            "name_": "CvtResizeNormTrans_17",
            "desc_": "cv::Mat to device::Tensor[cvtcolor->resize->normalize->transpose]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "Tensor",
                    "name_": "CvtResizeNormTrans_17@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "param_": {
                "src_pixel_type_": "kPixelTypeBGR",
                "dst_pixel_type_": "kPixelTypeRGB",
                "interp_type_": "kInterpTypeLinear",
                "h_": 640,
                "w_": 640,
                "data_type_": "kDataTypeCodeFp32",
                "data_format_": "kDataFormatNCHW",
                "normalize_": true,
                "scale_": [
                    0.003921568859368563,
                    0.003921568859368563,
                    0.003921568859368563,
                    0.003921568859368563
                ],
                "mean_": [
                    0.5,
                    0.5,
                    0.5,
                    0.5
                ],
                "std_": [
                    1,
                    1,
                    1,
                    1
                ]
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::infer::Infer",
            "name_": "Infer_18",
            "desc_": "Universal Inference Node - Enables cross-platform model deployment with multiple inference backends while maintaining native performance",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": true,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "Tensor",
                    "name_": "CvtResizeNormTrans_17@output_0"
                }
            ],
            "is_dynamic_output_": true,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "Tensor",
                    "name_": "Infer_18@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "type_": "kInferenceTypeOnnxRuntime",
            "param_": {
                "model_type_": "kModelTypeOnnx",
                "is_path_": true,
                "model_value_": [
                    "/home/lds/modelscope/nndeploy/detect/yolo11s.sim.onnx"
                ],
                "external_model_data_": [
                    ""
                ],
                "device_type_": "kDeviceTypeCodeCpu:0",
                "num_thread_": 4,
                "gpu_tune_kernel_": 1,
                "input_num_": 1,
                "input_name_": [
                    ""
                ],
                "input_shape_": [
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                "output_num_": 1,
                "output_name_": [
                    ""
                ],
                "encrypt_type_": "kEncryptTypeNone",
                "license_": "",
                "share_memory_mode_": "kShareMemoryTypeNoShare",
                "precision_type_": "kPrecisionTypeFp32",
                "power_type_": "kPowerTypeNormal",
                "is_dynamic_shape_": false,
                "min_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "opt_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "max_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "parallel_type_": "kParallelTypeNone",
                "worker_num_": 1
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::detect::YoloPostProcess",
            "name_": "YoloPostProcess_19",
            "desc_": "YOLO v5/v6/v7/v8/v11 postprocess[device::Tensor->DetectResult]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "Tensor",
                    "name_": "Infer_18@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "DetectResult",
                    "name_": "YoloPostProcess_19@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "param_": {
                "version_": 11,
                "score_threshold_": 0.5,
                "nms_threshold_": 0.45,
                "num_classes_": 80,
                "model_h_": 640,
                "model_w_": 640
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::detect::DrawBox",
            "name_": "DrawBox_20",
            "desc_": "Draw detection boxes on input cv::Mat image based on detection results[cv::Mat->cv::Mat]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                },
                {
                    "desc_": "input_1",
                    "type_": "DetectResult",
                    "name_": "YoloPostProcess_19@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "ndarray",
                    "name_": "DrawBox_20@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "node_repository_": []
        },
        {
            "key_": "nndeploy::codec::OpenCvImageEncode",
            "name_": "OpenCvImageEncode_21",
            "desc_": "Encode image using OpenCV, from cv::Mat to image file, supports common image formats",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "DrawBox_20@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [],
            "node_type_": "Output",
            "path_": "/home/always/github/public/nndeploy/resources/images/sample_yolov11.jpg",
            "node_repository_": []
        },
        {
            "key_": "nndeploy::preprocess::CvtResizeNormTrans",
            "name_": "CvtResizeNormTrans_22",
            "desc_": "cv::Mat to device::Tensor[cvtcolor->resize->normalize->transpose]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "Tensor",
                    "name_": "CvtResizeNormTrans_22@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "param_": {
                "src_pixel_type_": "kPixelTypeBGR",
                "dst_pixel_type_": "kPixelTypeRGB",
                "interp_type_": "kInterpTypeLinear",
                "h_": 224,
                "w_": 224,
                "data_type_": "kDataTypeCodeFp32",
                "data_format_": "kDataFormatNCHW",
                "normalize_": true,
                "scale_": [
                    0.003921568859368563,
                    0.003921568859368563,
                    0.003921568859368563,
                    0.003921568859368563
                ],
                "mean_": [
                    0.485,
                    0.456,
                    0.406,
                    0.5
                ],
                "std_": [
                    0.229,
                    0.224,
                    0.225,
                    1
                ]
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::infer::Infer",
            "name_": "Infer_23",
            "desc_": "Universal Inference Node - Enables cross-platform model deployment with multiple inference backends while maintaining native performance",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": true,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "Tensor",
                    "name_": "CvtResizeNormTrans_22@output_0"
                }
            ],
            "is_dynamic_output_": true,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "Tensor",
                    "name_": "Infer_23@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "type_": "kInferenceTypeOnnxRuntime",
            "param_": {
                "model_type_": "kModelTypeOnnx",
                "is_path_": true,
                "model_value_": [
                    "/home/lds/modelscope/nndeploy/classification/resnet50-v1-7.slim.onnx"
                ],
                "external_model_data_": [
                    ""
                ],
                "device_type_": "kDeviceTypeCodeCpu:0",
                "num_thread_": 4,
                "gpu_tune_kernel_": 1,
                "input_num_": 1,
                "input_name_": [
                    ""
                ],
                "input_shape_": [
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                "output_num_": 1,
                "output_name_": [
                    ""
                ],
                "encrypt_type_": "kEncryptTypeNone",
                "license_": "",
                "share_memory_mode_": "kShareMemoryTypeNoShare",
                "precision_type_": "kPrecisionTypeFp32",
                "power_type_": "kPowerTypeNormal",
                "is_dynamic_shape_": false,
                "min_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "opt_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "max_shape_": {
                    "input_0": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "parallel_type_": "kParallelTypeNone",
                "worker_num_": 1
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::classification::ClassificationPostProcess",
            "name_": "ClassificationPostProcess_24",
            "desc_": "Classification postprocess[device::Tensor->ClassificationResult]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "Tensor",
                    "name_": "Infer_23@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "ClassificationResult",
                    "name_": "ClassificationPostProcess_24@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "param_": {
                "topk": 1,
                "is_softmax": true,
                "version": -1
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::classification::DrawLable",
            "name_": "DrawLable_25",
            "desc_": "Draw classification labels on input cv::Mat image based on classification results[cv::Mat->cv::Mat]",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "OpenCvImageDecode_11@output_0"
                },
                {
                    "desc_": "input_1",
                    "type_": "ClassificationResult",
                    "name_": "ClassificationPostProcess_24@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "ndarray",
                    "name_": "DrawLable_25@output_0"
                }
            ],
            "node_type_": "Intermediate",
            "node_repository_": []
        },
        {
            "key_": "nndeploy::codec::OpenCvImageEncode",
            "name_": "OpenCvImageEncode_26",
            "desc_": "Encode image using OpenCV, from cv::Mat to image file, supports common image formats",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "ndarray",
                    "name_": "DrawLable_25@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [],
            "node_type_": "Output",
            "path_": "/home/always/github/public/nndeploy/resources/images/sample_resnet.jpg",
            "node_repository_": []
        }
    ],
    "nndeploy_ui_layout": {
        "OpenCvImageDecode_11": {
            "x": -1182.0529479980469,
            "y": -294.1906799316404
        },
        "CvtResizeNormTrans_12": {
            "x": -882.0529479980469,
            "y": -337.2906799316403
        },
        "Infer_13": {
            "x": -610.7238129738894,
            "y": -387.09067993164035
        },
        "RMBGPostProcess_14": {
            "x": -296.3883804859681,
            "y": -442.49067993164033
        },
        "DrawMask_15": {
            "x": 17.947052001953125,
            "y": -456.3906799316404
        },
        "OpenCvImageEncode_16": {
            "x": 317.9470520019531,
            "y": -456.99067993164044
        },
        "CvtResizeNormTrans_17": {
            "x": -882.0529479980469,
            "y": -128.59067993164024
        },
        "Infer_18": {
            "x": -582.0529479980469,
            "y": -128.59067993164024
        },
        "YoloPostProcess_19": {
            "x": -282.0529479980469,
            "y": -128.59067993164024
        },
        "DrawBox_20": {
            "x": 25.397954074540166,
            "y": -154.59067993164035
        },
        "OpenCvImageEncode_21": {
            "x": 317.9470520019531,
            "y": -191.59067993164024
        },
        "CvtResizeNormTrans_22": {
            "x": -882.0529479980469,
            "y": 73.6093200683597
        },
        "Infer_23": {
            "x": -582.0529479980469,
            "y": 73.6093200683597
        },
        "ClassificationPostProcess_24": {
            "x": -282.0529479980469,
            "y": 73.6093200683597
        },
        "DrawLable_25": {
            "x": 17.947052001953125,
            "y": 47.60932006835969
        },
        "OpenCvImageEncode_26": {
            "x": 317.9470520019531,
            "y": 94.20932006835938
        }
    }
}