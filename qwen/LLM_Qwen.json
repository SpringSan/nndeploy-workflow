{
    "key_": "nndeploy.dag.Graph",
    "name_": "LLM_Qwen",
    "developer_": "always",
    "source_": "https://github.com/QwenLM/Qwen",
    "desc_": "Qwen Serial LLM Workflow",
    "device_type_": "kDeviceTypeCodeCpu:0",
    "version_": "1.0.0",
    "required_params_": [],
    "ui_params_": [],
    "io_params_": [],
    "dropdown_params_": {},
    "is_dynamic_input_": false,
    "inputs_": [],
    "is_dynamic_output_": false,
    "outputs_": [],
    "is_graph_": true,
    "parallel_type_": "kParallelTypeNone",
    "is_inner_": false,
    "node_type_": "Intermediate",
    "is_time_profile_": false,
    "is_debug_": false,
    "is_external_stream_": false,
    "is_graph_node_share_stream_": true,
    "queue_max_size_": 16,
    "is_loop_max_flag_": true,
    "loop_count_": -1,
    "unused_node_names_": [],
    "image_url_": [
        "template[http,modelscope]@https://template.cn/template.jpg"
    ],
    "video_url_": [
        "template[http,modelscope]@https://template.cn/template.mp4"
    ],
    "audio_url_": [
        "template[http,modelscope]@https://template.cn/template.mp3"
    ],
    "model_url_": [
        "modelscope@nndeploy/nndeploy:qwen/Qwen2-0.5B-Instruct/onnx/llm.onnx",
        "modelscope@nndeploy/nndeploy:qwen/Qwen2-0.5B-Instruct/onnx/llm.onnx.data",
        "modelscope@nndeploy/nndeploy:qwen/Qwen2-0.5B-Instruct/llm_config.v2.json",
        "modelscope@nndeploy/nndeploy:qwen/Qwen2-0.5B-Instruct/tokenizer.txt",
        "modelscope@nndeploy/nndeploy:qwen/Qwen2-0.5B-Instruct/embeddings_bf16.bin",
        "modelscope@nndeploy/nndeploy:qwen/Qwen2-0.5B-Instruct/tokenizer.json"
    ],
    "other_url_": [
        "template[http,modelscope]@https://template.cn/template.txt"
    ],
    "node_repository_": [
        {
            "key_": "nndeploy::llm::Prefill",
            "name_": "Prefill_1",
            "developer_": "",
            "source_": "",
            "desc_": "Prefill: Prefill pipeline",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "version_": "1.0.0",
            "required_params_": [],
            "ui_params_": [],
            "io_params_": [],
            "dropdown_params_": {},
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_text",
                    "type_": "TokenizerText",
                    "name_": "Prompt_4@output_0"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_tokens",
                    "type_": "TokenizerIds",
                    "name_": "Prefill_1@output_tokens"
                }
            ],
            "is_graph_": true,
            "parallel_type_": "kParallelTypeNone",
            "is_inner_": true,
            "node_type_": "Intermediate",
            "image_url_": [
                "template[http,modelscope]@https://template.cn/template.jpg"
            ],
            "video_url_": [
                "template[http,modelscope]@https://template.cn/template.mp4"
            ],
            "audio_url_": [
                "template[http,modelscope]@https://template.cn/template.mp3"
            ],
            "model_url_": [
                "template[http,modelscope]@https://template.cn/template.onnx"
            ],
            "other_url_": [
                "template[http,modelscope]@https://template.cn/template.txt"
            ],
            "node_repository_": [
                {
                    "key_": "nndeploy::tokenizer::TokenizerEncodeCpp",
                    "name_": "tokenizer_encode",
                    "developer_": "",
                    "source_": "",
                    "desc_": "A tokenizer encode node that uses the C++ tokenizers library to encode text into token IDs. Supports HuggingFace and BPE tokenizers. Can encode single strings or batches of text. Provides vocabulary lookup and token-to-ID conversion.",
                    "device_type_": "kDeviceTypeCodeCpu:0",
                    "version_": "1.0.0",
                    "required_params_": [],
                    "ui_params_": [],
                    "io_params_": [],
                    "dropdown_params_": {},
                    "is_dynamic_input_": false,
                    "inputs_": [
                        {
                            "name_": "Prompt_4@output_0",
                            "type_": "TokenizerText",
                            "desc_": "input_0",
                            "id": "portfwyxuy7o5"
                        }
                    ],
                    "is_dynamic_output_": false,
                    "outputs_": [
                        {
                            "name_": "tokenizer_encode_output_0_TokenizerIds",
                            "type_": "TokenizerIds",
                            "desc_": "output_0",
                            "id": "portilthvkyf2"
                        }
                    ],
                    "node_type_": "Intermediate",
                    "param_": {
                        "required_params_": [
                            "tokenizer_type_"
                        ],
                        "ui_params_": [],
                        "io_params_": [],
                        "dropdown_params_": {},
                        "is_path_": true,
                        "tokenizer_type_": "kTokenizerTypeHF",
                        "json_blob_": "resources/models/qwen/Qwen2-0.5B-Instruct/tokenizer.json",
                        "model_blob_": "",
                        "vocab_blob_": "",
                        "merges_blob_": "",
                        "added_tokens_": "",
                        "max_length_": 77
                    },
                    "id": "node4gvh1d3zl"
                },
                {
                    "key_": "nndeploy::llm::LlmInfer",
                    "name_": "prefill_infer",
                    "developer_": "",
                    "source_": "",
                    "desc_": "LlmInfer: LLM inference CompositeNode",
                    "device_type_": "kDeviceTypeCodeCpu:0",
                    "version_": "1.0.0",
                    "required_params_": [],
                    "ui_params_": [],
                    "io_params_": [],
                    "dropdown_params_": {},
                    "is_dynamic_input_": true,
                    "inputs_": [
                        {
                            "name_": "tokenizer_encode_output_0_TokenizerIds",
                            "type_": "TokenizerIds",
                            "desc_": "input_tokens",
                            "id": "portijmfe7sjl"
                        }
                    ],
                    "is_dynamic_output_": false,
                    "outputs_": [
                        {
                            "name_": "output_logits",
                            "type_": "Tensor",
                            "desc_": "output_logits",
                            "id": "portgp1ggdu5b"
                        }
                    ],
                    "is_composite_node_": true,
                    "node_type_": "Intermediate",
                    "is_prefill": true,
                    "model_key": "Qwen",
                    "infer_key": "DefaultLlmInfer",
                    "config_path": [
                        "resources/models/qwen/Qwen2-0.5B-Instruct/llm_config.v2.json"
                    ],
                    "model_inputs": [
                        "input_ids",
                        "attention_mask",
                        "position_ids",
                        "past_key_values"
                    ],
                    "model_outputs": [
                        "logits",
                        "presents"
                    ],
                    "id": "nodejaj949fkm"
                },
                {
                    "key_": "nndeploy::llm::Sampler",
                    "name_": "prefill_sampler",
                    "developer_": "",
                    "source_": "",
                    "desc_": "Sample generates next token from model logits using various sampling strategies:\n1. Greedy sampling - select token with highest probability\n2. Temperature sampling - sample from temperature-scaled distribution\n3. Top-K sampling - sample from top K most likely tokens\n4. Top-P (nucleus) sampling - sample from tokens with cumulative probability <= P\n5. Min-P sampling - filter tokens below minimum probability threshold\n6. Repetition penalty - penalize repeated tokens/n-grams\n\nInputs:\n- inputs[0]: Tensor containing model logits for next token prediction\nOutputs:\n- outputs[0]: TokenizerIds containing sampled token ID\n",
                    "device_type_": "kDeviceTypeCodeCpu:0",
                    "version_": "1.0.0",
                    "required_params_": [],
                    "ui_params_": [],
                    "io_params_": [],
                    "dropdown_params_": {},
                    "is_dynamic_input_": false,
                    "inputs_": [
                        {
                            "name_": "output_logits",
                            "type_": "Tensor",
                            "desc_": "logits",
                            "id": "port8wy37iv6p"
                        }
                    ],
                    "is_dynamic_output_": false,
                    "outputs_": [
                        {
                            "name_": "Prefill_1@output_tokens",
                            "type_": "TokenizerIds",
                            "desc_": "sampled_token",
                            "id": "port3pcyz9oiu"
                        }
                    ],
                    "node_type_": "Intermediate",
                    "param_": {
                        "required_params_": [],
                        "ui_params_": [],
                        "io_params_": [],
                        "dropdown_params_": {
                            "sampler": [
                                "greedy",
                                "temperature",
                                "topK",
                                "topP",
                                "minP",
                                "tfs",
                                "typical",
                                "penalty",
                                "ngram"
                            ]
                        },
                        "sampler": "temperature",
                        "temperature": 0.800000011920929,
                        "topK": 40,
                        "topP": 0.8999999761581421,
                        "minP": 0.05000000074505806,
                        "tfsZ": 1,
                        "typical": 0.949999988079071,
                        "penalty": 1.0499999523162842,
                        "ngram": 8,
                        "ngram_factor": 1.0199999809265137,
                        "max_penalty": 10,
                        "mixed_samplers": [
                            "topK",
                            "tfs",
                            "typical",
                            "topP",
                            "minP",
                            "temperature"
                        ]
                    },
                    "id": "node2j78hpexf"
                }
            ],
            "size": {
                "width": 200,
                "height": 80
            }
        },
        {
            "key_": "nndeploy::llm::Decode",
            "name_": "Decode_2",
            "developer_": "",
            "source_": "",
            "desc_": "Decode: Decode pipeline",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "version_": "1.0.0",
            "required_params_": [],
            "ui_params_": [],
            "io_params_": [],
            "dropdown_params_": {},
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_tokens",
                    "type_": "TokenizerIds",
                    "name_": "Prefill_1@output_tokens"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_text",
                    "type_": "TokenizerText",
                    "name_": "Decode_2@output_text"
                }
            ],
            "is_graph_": true,
            "parallel_type_": "kParallelTypeNone",
            "is_inner_": true,
            "is_loop_": true,
            "node_type_": "Intermediate",
            "image_url_": [
                "template[http,modelscope]@https://template.cn/template.jpg"
            ],
            "video_url_": [
                "template[http,modelscope]@https://template.cn/template.mp4"
            ],
            "audio_url_": [
                "template[http,modelscope]@https://template.cn/template.mp3"
            ],
            "model_url_": [
                "template[http,modelscope]@https://template.cn/template.onnx"
            ],
            "other_url_": [
                "template[http,modelscope]@https://template.cn/template.txt"
            ],
            "tokenizer_txt_": "",
            "stop_texts_": [
                "<|endoftext|>",
                "<|im_end|>",
                "</s>",
                "<|end|>",
                "<|eot_id|>",
                "[DONE]"
            ],
            "node_repository_": [
                {
                    "key_": "nndeploy::llm::LlmInfer",
                    "name_": "decode_infer",
                    "developer_": "",
                    "source_": "",
                    "desc_": "LlmInfer: LLM inference CompositeNode",
                    "device_type_": "kDeviceTypeCodeCpu:0",
                    "version_": "1.0.0",
                    "required_params_": [],
                    "ui_params_": [],
                    "io_params_": [],
                    "dropdown_params_": {},
                    "is_dynamic_input_": true,
                    "inputs_": [
                        {
                            "name_": "Prefill_1@output_tokens",
                            "type_": "TokenizerIds",
                            "desc_": "input_tokens",
                            "id": "portwk2yqd8sm"
                        }
                    ],
                    "is_dynamic_output_": false,
                    "outputs_": [
                        {
                            "name_": "output_logits",
                            "type_": "Tensor",
                            "desc_": "output_logits",
                            "id": "port0ebbi9r1a"
                        }
                    ],
                    "is_composite_node_": true,
                    "node_type_": "Intermediate",
                    "is_prefill": false,
                    "model_key": "Qwen",
                    "infer_key": "DefaultLlmInfer",
                    "config_path": [
                        "resources/models/qwen/Qwen2-0.5B-Instruct/llm_config.v2.json"
                    ],
                    "model_inputs": [
                        "input_ids",
                        "attention_mask",
                        "position_ids",
                        "past_key_values"
                    ],
                    "model_outputs": [
                        "logits",
                        "presents"
                    ],
                    "id": "node215nf20ej"
                },
                {
                    "key_": "nndeploy::llm::Sampler",
                    "name_": "decode_sampler",
                    "developer_": "",
                    "source_": "",
                    "desc_": "Sample generates next token from model logits using various sampling strategies:\n1. Greedy sampling - select token with highest probability\n2. Temperature sampling - sample from temperature-scaled distribution\n3. Top-K sampling - sample from top K most likely tokens\n4. Top-P (nucleus) sampling - sample from tokens with cumulative probability <= P\n5. Min-P sampling - filter tokens below minimum probability threshold\n6. Repetition penalty - penalize repeated tokens/n-grams\n\nInputs:\n- inputs[0]: Tensor containing model logits for next token prediction\nOutputs:\n- outputs[0]: TokenizerIds containing sampled token ID\n",
                    "device_type_": "kDeviceTypeCodeCpu:0",
                    "version_": "1.0.0",
                    "required_params_": [],
                    "ui_params_": [],
                    "io_params_": [],
                    "dropdown_params_": {},
                    "is_dynamic_input_": false,
                    "inputs_": [
                        {
                            "name_": "output_logits",
                            "type_": "Tensor",
                            "desc_": "logits",
                            "id": "porty0x5j50a7"
                        }
                    ],
                    "is_dynamic_output_": false,
                    "outputs_": [
                        {
                            "name_": "sampled_token",
                            "type_": "TokenizerIds",
                            "desc_": "sampled_token",
                            "id": "portvl0gygusx"
                        }
                    ],
                    "node_type_": "Intermediate",
                    "param_": {
                        "required_params_": [],
                        "ui_params_": [],
                        "io_params_": [],
                        "dropdown_params_": {
                            "sampler": [
                                "greedy",
                                "temperature",
                                "topK",
                                "topP",
                                "minP",
                                "tfs",
                                "typical",
                                "penalty",
                                "ngram"
                            ]
                        },
                        "sampler": "temperature",
                        "temperature": 0.800000011920929,
                        "topK": 40,
                        "topP": 0.8999999761581421,
                        "minP": 0.05000000074505806,
                        "tfsZ": 1,
                        "typical": 0.949999988079071,
                        "penalty": 1.0499999523162842,
                        "ngram": 8,
                        "ngram_factor": 1.0199999809265137,
                        "max_penalty": 10,
                        "mixed_samplers": [
                            "topK",
                            "tfs",
                            "typical",
                            "topP",
                            "minP",
                            "temperature"
                        ]
                    },
                    "id": "nodeu0e7hbp3p"
                },
                {
                    "key_": "nndeploy::tokenizer::TokenizerDecodeCpp",
                    "name_": "tokenizer_decode",
                    "developer_": "",
                    "source_": "",
                    "desc_": "A tokenizer decode node that uses the C++ tokenizers library to decode token IDs into text. Supports HuggingFace and BPE tokenizers. Can decode single token IDs or batches of token IDs. Provides token-to-text conversion.",
                    "device_type_": "kDeviceTypeCodeCpu:0",
                    "version_": "1.0.0",
                    "required_params_": [],
                    "ui_params_": [],
                    "io_params_": [],
                    "dropdown_params_": {},
                    "is_dynamic_input_": false,
                    "inputs_": [
                        {
                            "name_": "sampled_token",
                            "type_": "TokenizerIds",
                            "desc_": "input_0",
                            "id": "portpi0j7b1me"
                        }
                    ],
                    "is_dynamic_output_": false,
                    "outputs_": [
                        {
                            "name_": "tokenizer_decode_output_0_TokenizerText",
                            "type_": "TokenizerText",
                            "desc_": "output_0",
                            "id": "port7ayhmhkkb"
                        }
                    ],
                    "node_type_": "Intermediate",
                    "param_": {
                        "required_params_": [
                            "tokenizer_type_"
                        ],
                        "ui_params_": [],
                        "io_params_": [],
                        "dropdown_params_": {},
                        "is_path_": true,
                        "tokenizer_type_": "kTokenizerTypeHF",
                        "json_blob_": "resources/models/qwen/Qwen2-0.5B-Instruct/tokenizer.json",
                        "model_blob_": "",
                        "vocab_blob_": "",
                        "merges_blob_": "",
                        "added_tokens_": "",
                        "max_length_": 77
                    },
                    "id": "nodes1q2b55cy"
                },
                {
                    "key_": "nndeploy::llm::StreamOut",
                    "name_": "stream_out",
                    "developer_": "",
                    "source_": "",
                    "desc_": "StreamOut: Stream output node",
                    "device_type_": "kDeviceTypeCodeCpu:0",
                    "version_": "1.0.0",
                    "required_params_": [],
                    "ui_params_": [],
                    "io_params_": [],
                    "dropdown_params_": {},
                    "is_dynamic_input_": false,
                    "inputs_": [
                        {
                            "name_": "tokenizer_decode_output_0_TokenizerText",
                            "type_": "TokenizerText",
                            "desc_": "input_text",
                            "id": "portjggz5duwy"
                        }
                    ],
                    "is_dynamic_output_": false,
                    "outputs_": [
                        {
                            "name_": "Decode_2@output_text",
                            "type_": "TokenizerText",
                            "desc_": "output_text",
                            "id": "portkmuzfq9uc"
                        },
                        {
                            "name_": "stream_output",
                            "type_": "basic_string<char>",
                            "desc_": "stream_output",
                            "id": "portyfrwsrpq9"
                        }
                    ],
                    "node_type_": "Intermediate",
                    "enable_stream_": true,
                    "id": "nodez1d8od4mb"
                }
            ],
            "size": {
                "width": 200,
                "height": 80
            }
        },
        {
            "key_": "nndeploy::llm::LlmOut",
            "name_": "LlmOut_3",
            "developer_": "",
            "source_": "",
            "desc_": "Print TokenizerText content and save to temporary output file.",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "version_": "1.0.0",
            "required_params_": [
                "path_"
            ],
            "ui_params_": [],
            "io_params_": [],
            "dropdown_params_": {},
            "is_dynamic_input_": false,
            "inputs_": [
                {
                    "desc_": "input_0",
                    "type_": "TokenizerText",
                    "name_": "Decode_2@output_text"
                }
            ],
            "is_dynamic_output_": false,
            "outputs_": [],
            "node_type_": "Output",
            "io_type_": "Text",
            "path_": "resources/others/llm_out.txt",
            "size": {
                "width": 200,
                "height": 80
            },
            "node_repository_": []
        },
        {
            "key_": "nndeploy::llm::Prompt",
            "name_": "Prompt_4",
            "developer_": "",
            "source_": "",
            "desc_": "Generate TokenizerText from prompt string using optional template.",
            "device_type_": "kDeviceTypeCodeCpu:0",
            "version_": "1.0.0",
            "required_params_": [],
            "ui_params_": [],
            "io_params_": [],
            "dropdown_params_": {},
            "is_dynamic_input_": false,
            "inputs_": [],
            "is_dynamic_output_": false,
            "outputs_": [
                {
                    "desc_": "output_0",
                    "type_": "TokenizerText",
                    "name_": "Prompt_4@output_0"
                }
            ],
            "node_type_": "Input",
            "io_type_": "String",
            "param_": {
                "required_params_": [
                    "user_content_"
                ],
                "ui_params_": [],
                "io_params_": [],
                "dropdown_params_": {},
                "prompt_template_": "<|im_start|>user\n%s<|im_end|>\n<|im_start|>assistant\n",
                "user_content_": "谁是李白"
            },
            "size": {
                "width": 200,
                "height": 80
            },
            "node_repository_": []
        }
    ],
    "nndeploy_ui_layout": {
        "layout": {
            "Prefill_1": {
                "x": -272.0226745605469,
                "y": -127.79067993164062
            },
            "Decode_2": {
                "x": -13.022674560546875,
                "y": -127.79067993164062
            },
            "LlmOut_3": {
                "x": 222.97732543945312,
                "y": -127.79067993164062
            },
            "Prompt_4": {
                "x": -531.0226745605469,
                "y": -127.79067993164062
            }
        },
        "groups": []
    }
}